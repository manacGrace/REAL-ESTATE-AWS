services:
  frontend:
    build:
      context: ./ProjetImmo_FE
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=${VITE_API_URL}
        - VITE_FRONTEND_SUBDOMAIN=${VITE_FRONTEND_SUBDOMAIN}
        - VITE_BACKEND_SUBDOMAIN=${VITE_BACKEND_SUBDOMAIN}
    container_name: ${FRONTEND_CONTAINER}
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - real-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${VITE_FRONTEND_SUBDOMAIN}.${MY_DOMAIN}`)"
      - "traefik.http.routers.frontend.entryPoints=websecure"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

  backend:
    build:
      context: ./ProjetImmo_BE
      dockerfile: Dockerfile
    container_name: ${BACKEND_CONTAINER}
    restart: unless-stopped
    networks:
      - real-network
    ports:
      - "${API_PORT}:${API_PORT}"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mariadb://mariadb:3306/realdb
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=123
      - SERVER_PORT=8888
      - SPRING_DATASOURCE_DRIVER-CLASS-NAME=org.mariadb.jdbc.Driver
      - VITE_FRONTEND_SUBDOMAIN=${VITE_FRONTEND_SUBDOMAIN}
      - MY_DOMAIN=${MY_DOMAIN}
    depends_on:
      mariadb:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`${VITE_BACKEND_SUBDOMAIN}.${MY_DOMAIN}`)"
      - "traefik.http.routers.backend.entryPoints=websecure"
      - "traefik.http.services.backend.loadbalancer.server.port=${API_PORT}"

  mariadb:
    image: mariadb:latest
    container_name: ${MARIADB_CONTAINER}
    restart: unless-stopped
    networks:
      - real-network
    environment:
      - MARIADB_ROOT_PASSWORD=123
      - MARIADB_DATABASE=realdb
    volumes:
      - db:/var/lib/mysql
      - ./seed/seed.sql:/docker-entrypoint-initdb.d/seed.sql
    healthcheck:
      test: ["CMD", "mariadb", "--host=localhost", "--user=root", "--password=123", "--execute=SELECT 1"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5

  proxy:
    image: traefik
    container_name: ${TRAEFIK_CONTAINER}
    restart: unless-stopped
    networks:
      - real-network
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http.tls.certResolver=letsencrypt"
      - "--entrypoints.websecure.http.tls.domains[0].main=${MY_DOMAIN}"
    volumes:
      - "./data/traefik/letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${MY_DOMAIN}`)"
      - "traefik.http.routers.api.entryPoints=websecure"
      - "traefik.http.routers.api.service=api@internal"
    ports:
      - "443:443"
      - "80:80"
    environment:
      - "DUCKDNS_TOKEN=${DUCKDNS_TOKEN}"

volumes:
  db:

networks:
  real-network:
    driver: bridge
